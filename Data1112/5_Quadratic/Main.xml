<class>
 <keyword> class </keyword>
 <identifier> Main </identifier>
 <symbol> { </symbol>
 <subroutineDec>
  <keyword> function </keyword>
  <type>
   <keyword> int </keyword>
  </type>
  <identifier> quadratic </identifier>
  <symbol> ( </symbol>
  <parameterList>
   <type>
    <keyword> int </keyword>
   </type>
   <identifier> a </identifier>
   <symbol> , </symbol>
   <type>
    <keyword> int </keyword>
   </type>
   <identifier> b </identifier>
   <symbol> , </symbol>
   <type>
    <keyword> int </keyword>
   </type>
   <identifier> c </identifier>
   <symbol> , </symbol>
   <type>
    <keyword> int </keyword>
   </type>
   <identifier> plus </identifier>
  </parameterList>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <varDec>
   <keyword> var </keyword>
   <type>
    <keyword> int </keyword>
   </type>
   <identifier> p1 </identifier>
   <symbol> , </symbol>
   <identifier> p2 </identifier>
   <symbol> , </symbol>
   <identifier> p3 </identifier>
   <symbol> ; </symbol>
  </varDec>
  <varDec>
   <keyword> var </keyword>
   <type>
    <keyword> int </keyword>
   </type>
   <identifier> m1 </identifier>
   <symbol> ; </symbol>
  </varDec>
  <statements>
   <letStatement>
    <keyword> let </keyword>
    <identifier> p1 </identifier>
    <symbol> = </symbol>
    <expression>
     <term>
      <symbol> - </symbol>
      <term>
       <identifier> b </identifier>
      </term>
     </term>
    </expression>
    <symbol> ; </symbol>
   </letStatement>
   <letStatement>
    <keyword> let </keyword>
    <identifier> p2 </identifier>
    <symbol> = </symbol>
    <expression>
     <term>
      <subroutineCall>
       <identifier> Math </identifier>
       <symbol> . </symbol>
       <identifier> sqrt </identifier>
       <symbol> ( </symbol>
       <expressionList>
        <expression>
         <term>
          <identifier> b </identifier>
         </term>
         <symbol> * </symbol>
         <term>
          <identifier> b </identifier>
         </term>
         <symbol> - </symbol>
         <term>
          <symbol> ( </symbol>
          <expression>
           <term>
            <integerConstant> 4 </integerConstant>
           </term>
           <symbol> * </symbol>
           <term>
            <identifier> a </identifier>
           </term>
           <symbol> * </symbol>
           <term>
            <identifier> c </identifier>
           </term>
          </expression>
          <symbol> ) </symbol>
         </term>
        </expression>
       </expressionList>
       <symbol> ) </symbol>
      </subroutineCall>
     </term>
    </expression>
    <symbol> ; </symbol>
   </letStatement>
   <letStatement>
    <keyword> let </keyword>
    <identifier> p3 </identifier>
    <symbol> = </symbol>
    <expression>
     <term>
      <integerConstant> 2 </integerConstant>
     </term>
     <symbol> * </symbol>
     <term>
      <identifier> a </identifier>
     </term>
    </expression>
    <symbol> ; </symbol>
   </letStatement>
   <letStatement>
    <keyword> let </keyword>
    <identifier> m1 </identifier>
    <symbol> = </symbol>
    <expression>
     <term>
      <symbol> - </symbol>
      <term>
       <integerConstant> 2 </integerConstant>
      </term>
     </term>
     <symbol> * </symbol>
     <term>
      <identifier> plus </identifier>
     </term>
     <symbol> - </symbol>
     <term>
      <integerConstant> 1 </integerConstant>
     </term>
    </expression>
    <symbol> ; </symbol>
   </letStatement>
   <returnStatement>
    <keyword> return </keyword>
    <expression>
     <term>
      <identifier> p1 </identifier>
     </term>
     <symbol> + </symbol>
     <term>
      <symbol> ( </symbol>
      <expression>
       <term>
        <identifier> m1 </identifier>
       </term>
       <symbol> * </symbol>
       <term>
        <identifier> p2 </identifier>
       </term>
      </expression>
      <symbol> ) </symbol>
     </term>
     <symbol> / </symbol>
     <term>
      <identifier> p3 </identifier>
     </term>
    </expression>
    <symbol> ; </symbol>
   </returnStatement>
  </statements>
  <symbol> } </symbol>
 </subroutineDec>
 <subroutineDec>
  <keyword> function </keyword>
  <keyword> void </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <statements>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printInt </identifier>
     <symbol> ( </symbol>
     <expressionList>
      <expression>
       <term>
        <subroutineCall>
         <identifier> Main </identifier>
         <symbol> . </symbol>
         <identifier> quadratic </identifier>
         <symbol> ( </symbol>
         <expressionList>
          <expression>
           <term>
            <integerConstant> 1 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <symbol> - </symbol>
            <term>
             <integerConstant> 5 </integerConstant>
            </term>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <integerConstant> 6 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <keyword> true </keyword>
           </term>
          </expression>
         </expressionList>
         <symbol> ) </symbol>
        </subroutineCall>
       </term>
      </expression>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printChar </identifier>
     <symbol> ( </symbol>
     <expressionList>
      <expression>
       <term>
        <integerConstant> 32 </integerConstant>
       </term>
      </expression>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printInt </identifier>
     <symbol> ( </symbol>
     <expressionList>
      <expression>
       <term>
        <subroutineCall>
         <identifier> Main </identifier>
         <symbol> . </symbol>
         <identifier> quadratic </identifier>
         <symbol> ( </symbol>
         <expressionList>
          <expression>
           <term>
            <integerConstant> 1 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <symbol> - </symbol>
            <term>
             <integerConstant> 5 </integerConstant>
            </term>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <integerConstant> 6 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <keyword> false </keyword>
           </term>
          </expression>
         </expressionList>
         <symbol> ) </symbol>
        </subroutineCall>
       </term>
      </expression>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> println </identifier>
     <symbol> ( </symbol>
     <expressionList>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printInt </identifier>
     <symbol> ( </symbol>
     <expressionList>
      <expression>
       <term>
        <subroutineCall>
         <identifier> Main </identifier>
         <symbol> . </symbol>
         <identifier> quadratic </identifier>
         <symbol> ( </symbol>
         <expressionList>
          <expression>
           <term>
            <integerConstant> 2 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <integerConstant> 10 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <symbol> - </symbol>
            <term>
             <integerConstant> 72 </integerConstant>
            </term>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <keyword> true </keyword>
           </term>
          </expression>
         </expressionList>
         <symbol> ) </symbol>
        </subroutineCall>
       </term>
      </expression>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printChar </identifier>
     <symbol> ( </symbol>
     <expressionList>
      <expression>
       <term>
        <integerConstant> 32 </integerConstant>
       </term>
      </expression>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printInt </identifier>
     <symbol> ( </symbol>
     <expressionList>
      <expression>
       <term>
        <subroutineCall>
         <identifier> Main </identifier>
         <symbol> . </symbol>
         <identifier> quadratic </identifier>
         <symbol> ( </symbol>
         <expressionList>
          <expression>
           <term>
            <integerConstant> 2 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <integerConstant> 10 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <symbol> - </symbol>
            <term>
             <integerConstant> 72 </integerConstant>
            </term>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <keyword> false </keyword>
           </term>
          </expression>
         </expressionList>
         <symbol> ) </symbol>
        </subroutineCall>
       </term>
      </expression>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> println </identifier>
     <symbol> ( </symbol>
     <expressionList>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printInt </identifier>
     <symbol> ( </symbol>
     <expressionList>
      <expression>
       <term>
        <subroutineCall>
         <identifier> Main </identifier>
         <symbol> . </symbol>
         <identifier> quadratic </identifier>
         <symbol> ( </symbol>
         <expressionList>
          <expression>
           <term>
            <integerConstant> 1 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <integerConstant> 0 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <integerConstant> 7 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <keyword> true </keyword>
           </term>
          </expression>
         </expressionList>
         <symbol> ) </symbol>
        </subroutineCall>
       </term>
      </expression>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printChar </identifier>
     <symbol> ( </symbol>
     <expressionList>
      <expression>
       <term>
        <integerConstant> 32 </integerConstant>
       </term>
      </expression>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printInt </identifier>
     <symbol> ( </symbol>
     <expressionList>
      <expression>
       <term>
        <subroutineCall>
         <identifier> Main </identifier>
         <symbol> . </symbol>
         <identifier> quadratic </identifier>
         <symbol> ( </symbol>
         <expressionList>
          <expression>
           <term>
            <integerConstant> 1 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <integerConstant> 0 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <integerConstant> 7 </integerConstant>
           </term>
          </expression>
          <symbol> , </symbol>
          <expression>
           <term>
            <keyword> false </keyword>
           </term>
          </expression>
         </expressionList>
         <symbol> ) </symbol>
        </subroutineCall>
       </term>
      </expression>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <returnStatement>
    <keyword> return </keyword>
    <symbol> ; </symbol>
   </returnStatement>
  </statements>
  <symbol> } </symbol>
 </subroutineDec>
 <symbol> } </symbol>
</class>
