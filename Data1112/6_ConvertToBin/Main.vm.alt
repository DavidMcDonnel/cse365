function Main.main 2
  // do Main . fillMemory ( 8001   , 16   , - 1     )  ; 
  push constant 8001
  push constant 16
  push constant 1
  neg
  call Main.fillMemory 3
  pop temp 0
  // let value = Memory . peek ( 8000    )    ; 
  push constant 8000
  call Memory.peek 1
  pop local 1
  // do Main . convert ( value    )  ; 
  push local 1
  call Main.convert 1
  pop temp 0
  // return ; 
  push constant 0
  return
function Main.convert 3
  // let loop = true   ; 
  push constant 0
  not
  pop local 2
  // while ( loop   ) { let position = position  + 1   ;  let mask = Main . nextMask ( mask    )    ;  do Memory . poke ( 9000  + position   , mask    )  ;  if ( ~ ( position  > 16   )    ) { if ( ~ ( ( value  & mask   )  = 0   )    ) { do Memory . poke ( 8000  + position   , 1    )  ;   } else { do Memory . poke ( 8000  + position   , 0    )  ;   }   } else { let loop = false   ;   }   } 
label WHILE_EXP0
  push local 2
  not
  if-goto WHILE_END0
  // let position = position  + 1   ; 
  push local 1
  push constant 1
  add
  pop local 1
  // let mask = Main . nextMask ( mask    )    ; 
  push local 0
  call Main.nextMask 1
  pop local 0
  // do Memory . poke ( 9000  + position   , mask    )  ; 
  push constant 9000
  push local 1
  add
  push local 0
  call Memory.poke 2
  pop temp 0
  // if ( ~ ( position  > 16   )    ) { if ( ~ ( ( value  & mask   )  = 0   )    ) { do Memory . poke ( 8000  + position   , 1    )  ;   } else { do Memory . poke ( 8000  + position   , 0    )  ;   }   } else { let loop = false   ;   } 
  push local 1
  push constant 16
  gt
  not
  not
  if-goto IF_FALSE0
  // if ( ~ ( ( value  & mask   )  = 0   )    ) { do Memory . poke ( 8000  + position   , 1    )  ;   } else { do Memory . poke ( 8000  + position   , 0    )  ;   } 
  push argument 0
  push local 0
  and
  push constant 0
  eq
  not
  not
  if-goto IF_FALSE1
  // do Memory . poke ( 8000  + position   , 1    )  ; 
  push constant 8000
  push local 1
  add
  push constant 1
  call Memory.poke 2
  pop temp 0
  goto IF_END0
label IF_FALSE1
  // do Memory . poke ( 8000  + position   , 0    )  ; 
  push constant 8000
  push local 1
  add
  push constant 0
  call Memory.poke 2
  pop temp 0
label IF_END0
  goto IF_END1
label IF_FALSE0
  // let loop = false   ; 
  push constant 0
  pop local 2
label IF_END1
  goto WHILE_EXP0
label WHILE_END0
  // return ; 
  push constant 0
  return
function Main.nextMask 0
  // if ( mask  = 0   ) { return 1   ;   } else { return mask  * 2   ;   } 
  push argument 0
  push constant 0
  eq
  not
  if-goto IF_FALSE2
  // return 1   ; 
  push constant 1
  return
  goto IF_END2
label IF_FALSE2
  // return mask  * 2   ; 
  push argument 0
  push constant 2
  call Math.multiply 2
  return
label IF_END2
function Main.fillMemory 0
  // while ( length  > 0   ) { do Memory . poke ( startAddress   , value    )  ;  let length = length  - 1   ;  let startAddress = startAddress  + 1   ;   } 
label WHILE_EXP1
  push argument 1
  push constant 0
  gt
  not
  if-goto WHILE_END1
  // do Memory . poke ( startAddress   , value    )  ; 
  push argument 0
  push argument 2
  call Memory.poke 2
  pop temp 0
  // let length = length  - 1   ; 
  push argument 1
  push constant 1
  sub
  pop argument 1
  // let startAddress = startAddress  + 1   ; 
  push argument 0
  push constant 1
  add
  pop argument 0
  goto WHILE_EXP1
label WHILE_END1
  // return ; 
  push constant 0
  return
