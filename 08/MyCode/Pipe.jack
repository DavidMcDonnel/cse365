class Pipe{
	field int x;
	field int width;
	field int gapY, gapHeight;
	field boolean cleared;
	static Array gaps;
	static int gapLength;
	static int gapIndex;
	
	function void initializeGaps(){
		let gapIndex = 0;
		let gapLength = 10;
		let gaps = Array.new(gapLength);
		let gaps[0] = 88;
		let gaps[1] = 137;
                let gaps[2] = 62;
                let gaps[3] = 27;
                let gaps[4] = 105;
                let gaps[5] = 75;
                let gaps[6] = 26;
                let gaps[7] = 183;
                let gaps[8] = 36;
                let gaps[9] = 98;
		return;
	}
	
	function void disposeGaps(){
		do Array.dispose(gaps);
		return;
	}
	
	function int nextGap(){
		var int gap;
		let gap = gaps[gapIndex];
		let gapIndex = gapIndex + 1;
		if( gapIndex > (gapLength - 1)){
			let gapIndex = 0;
		}
		return gap;
	}
	
	constructor Pipe new(){
		do reset();
		return this;
	}
	
	method void dispose(){
		do Memory.deAlloc(this);
		return;
	}
	
	method void erase(){
		do Screen.drawRectangle(x,0,x+20,255);
		return;
	}
	
	method void shift(int distance){
		let x = x - distance;
		return;
	}
	
	method boolean isVisible(){
		return x > -1;
	}
	
	method void reset(){
		let width = 20;
		let x = 511 - width;
		let gapY = Pipe.nextGap();
		let gapLength = 50;
		let cleared = false;
		return;
	}

	method void draw(){
		do Screen.drawRectangle(x,0,x+20,gapY);
		do Screen.drawRectangle(x,gapY+gapHeight,x+20,255);
		return;
	}
	
	method boolean collidesWith(Player p){
		var boolean b;
		var int pX,pY,pSize,pRight;
		let pX = p.getX();
		let pY = p.getY();
		let pSize = p.getSize();
		let pRight = pX + pSize;
		let b = false;
		if((pRight > x) & (pRight < (x + width))){
			if(((pY - pSize)<gapY) | ((pY+pSize)>(gapY+gapHeight))){
				let b = true;
			}	
		}
		return b;		
	}
	
	method boolean wasJustPassedBy(Player p){
		if(cleared){
			return false;
		}
		if((p.getX() - p.getSize()) > (x + width)){
			let cleared = true;
			return true;
		}
		else{
			return false;
		}
	}
}

