// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
	static int bits;
	
    /** Initializes the library. */
    function void init() {
	let bits = Array.new(16);
	let bits[0] = 1;
	let bits[1] = 2;
	let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;
	return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
	if(x < 0){
		return -x;
	}
	else{
		return x;
	}
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
	
	var int i;
	var int total;
	var int shift;
	let i = 0;
	let total = 0;
	let shift = x;
	
	if((y = 0) | (x = 0)){
		return 0;
	}
	while(i < 16){
		if(~((y & bits[i]) = 0)){
			let total = total + shift;
		}
		let shift = shift + shift;
		let i = i + 1;
	}
	return total; 
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
	var int twoY;
	var int div;
	var int ans;
	var boolean bool;

	let bool = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
	let x = Math.abs(x);
	let y = Math.abs(y);
	let twoY = y + y;
	let div = Math.divide(x,twoY);
	
	if(y = 0){
		return Sys.error(3);
	}
	if(y > x){
		return 0;
	}
	if(twoY < 0){
		return 0;
	}
	if((x - (div*twoY)) < y){
		let ans = div * 2;
	}
	else{
		let ans = (div*2) + 1;
	}
	if(bool){
		let ans = -ans;
	}
	return ans;
		
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
	var int i;
	var int y;
	var int temp;
	var int tempSqr;

	let y = 0;
	let i = 7;
	if(x < 0){
		return Sys.error(4);
	}
	
	while(~(i < 0)){
		let temp = y + bits[i];
		let tempSqr = temp * temp;
		if(~(tempSqr > x) & (tempSqr > 0)){
			let y = temp;
		}
		let i = i - 1;
	}
	return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
	if(a > b){
		return a;
	}
	else{
		return b;
	}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
	if(a < b){
		return a;
	}
	else{
		return b;
	}
    }
}
