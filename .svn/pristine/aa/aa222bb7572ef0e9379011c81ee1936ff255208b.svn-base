function Square.new 0
  push constant 3
  call Memory.alloc 1
  pop pointer 0
  // let x = Ax   ; 
  push argument 0
  pop this 0
  // let y = Ay   ; 
  push argument 1
  pop this 1
  // let size = Asize   ; 
  push argument 2
  pop this 2
  // do draw (  )  ; 
  push pointer 0
  call Square.draw 1
  pop temp 0
  // return this   ; 
  push pointer 0
  return
function Square.dispose 0
  push argument 0
  pop pointer 0
  // do Memory . deAlloc ( this    )  ; 
  push pointer 0
  call Memory.deAlloc 1
  pop temp 0
  // return ; 
  push constant 0
  return
function Square.draw 0
  push argument 0
  pop pointer 0
  // do Screen . setColor ( true    )  ; 
  push constant 0
  not
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x   , y   , x  + size   , y  + size    )  ; 
  push this 0
  push this 1
  push this 0
  push this 2
  add
  push this 1
  push this 2
  add
  call Screen.drawRectangle 4
  pop temp 0
  // return ; 
  push constant 0
  return
function Square.erase 0
  push argument 0
  pop pointer 0
  // do Screen . setColor ( false    )  ; 
  push constant 0
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x   , y   , x  + size   , y  + size    )  ; 
  push this 0
  push this 1
  push this 0
  push this 2
  add
  push this 1
  push this 2
  add
  call Screen.drawRectangle 4
  pop temp 0
  // return ; 
  push constant 0
  return
function Square.incSize 0
  push argument 0
  pop pointer 0
  // if ( ( ( y  + size   )  < 254   )  & ( ( x  + size   )  < 510   )   ) { do erase (  )  ;  let size = size  + 2   ;  do draw (  )  ;   } 
  push this 1
  push this 2
  add
  push constant 254
  lt
  push this 0
  push this 2
  add
  push constant 510
  lt
  and
  not
  if-goto IF_FALSE0
  // do erase (  )  ; 
  push pointer 0
  call Square.erase 1
  pop temp 0
  // let size = size  + 2   ; 
  push this 2
  push constant 2
  add
  pop this 2
  // do draw (  )  ; 
  push pointer 0
  call Square.draw 1
  pop temp 0
label IF_FALSE0
  // return ; 
  push constant 0
  return
function Square.decSize 0
  push argument 0
  pop pointer 0
  // if ( size  > 2   ) { do erase (  )  ;  let size = size  - 2   ;  do draw (  )  ;   } 
  push this 2
  push constant 2
  gt
  not
  if-goto IF_FALSE1
  // do erase (  )  ; 
  push pointer 0
  call Square.erase 1
  pop temp 0
  // let size = size  - 2   ; 
  push this 2
  push constant 2
  sub
  pop this 2
  // do draw (  )  ; 
  push pointer 0
  call Square.draw 1
  pop temp 0
label IF_FALSE1
  // return ; 
  push constant 0
  return
function Square.moveUp 0
  push argument 0
  pop pointer 0
  // if ( y  > 1   ) { do Screen . setColor ( false    )  ;  do Screen . drawRectangle ( x   , ( y  + size   )  - 1   , x  + size   , y  + size    )  ;  let y = y  - 2   ;  do Screen . setColor ( true    )  ;  do Screen . drawRectangle ( x   , y   , x  + size   , y  + 1    )  ;   } 
  push this 1
  push constant 1
  gt
  not
  if-goto IF_FALSE2
  // do Screen . setColor ( false    )  ; 
  push constant 0
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x   , ( y  + size   )  - 1   , x  + size   , y  + size    )  ; 
  push this 0
  push this 1
  push this 2
  add
  push constant 1
  sub
  push this 0
  push this 2
  add
  push this 1
  push this 2
  add
  call Screen.drawRectangle 4
  pop temp 0
  // let y = y  - 2   ; 
  push this 1
  push constant 2
  sub
  pop this 1
  // do Screen . setColor ( true    )  ; 
  push constant 0
  not
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x   , y   , x  + size   , y  + 1    )  ; 
  push this 0
  push this 1
  push this 0
  push this 2
  add
  push this 1
  push constant 1
  add
  call Screen.drawRectangle 4
  pop temp 0
label IF_FALSE2
  // return ; 
  push constant 0
  return
function Square.moveDown 0
  push argument 0
  pop pointer 0
  // if ( ( y  + size   )  < 254   ) { do Screen . setColor ( false    )  ;  do Screen . drawRectangle ( x   , y   , x  + size   , y  + 1    )  ;  let y = y  + 2   ;  do Screen . setColor ( true    )  ;  do Screen . drawRectangle ( x   , ( y  + size   )  - 1   , x  + size   , y  + size    )  ;   } 
  push this 1
  push this 2
  add
  push constant 254
  lt
  not
  if-goto IF_FALSE3
  // do Screen . setColor ( false    )  ; 
  push constant 0
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x   , y   , x  + size   , y  + 1    )  ; 
  push this 0
  push this 1
  push this 0
  push this 2
  add
  push this 1
  push constant 1
  add
  call Screen.drawRectangle 4
  pop temp 0
  // let y = y  + 2   ; 
  push this 1
  push constant 2
  add
  pop this 1
  // do Screen . setColor ( true    )  ; 
  push constant 0
  not
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x   , ( y  + size   )  - 1   , x  + size   , y  + size    )  ; 
  push this 0
  push this 1
  push this 2
  add
  push constant 1
  sub
  push this 0
  push this 2
  add
  push this 1
  push this 2
  add
  call Screen.drawRectangle 4
  pop temp 0
label IF_FALSE3
  // return ; 
  push constant 0
  return
function Square.moveLeft 0
  push argument 0
  pop pointer 0
  // if ( x  > 1   ) { do Screen . setColor ( false    )  ;  do Screen . drawRectangle ( ( x  + size   )  - 1   , y   , x  + size   , y  + size    )  ;  let x = x  - 2   ;  do Screen . setColor ( true    )  ;  do Screen . drawRectangle ( x   , y   , x  + 1   , y  + size    )  ;   } 
  push this 0
  push constant 1
  gt
  not
  if-goto IF_FALSE4
  // do Screen . setColor ( false    )  ; 
  push constant 0
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( ( x  + size   )  - 1   , y   , x  + size   , y  + size    )  ; 
  push this 0
  push this 2
  add
  push constant 1
  sub
  push this 1
  push this 0
  push this 2
  add
  push this 1
  push this 2
  add
  call Screen.drawRectangle 4
  pop temp 0
  // let x = x  - 2   ; 
  push this 0
  push constant 2
  sub
  pop this 0
  // do Screen . setColor ( true    )  ; 
  push constant 0
  not
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x   , y   , x  + 1   , y  + size    )  ; 
  push this 0
  push this 1
  push this 0
  push constant 1
  add
  push this 1
  push this 2
  add
  call Screen.drawRectangle 4
  pop temp 0
label IF_FALSE4
  // return ; 
  push constant 0
  return
function Square.moveRight 0
  push argument 0
  pop pointer 0
  // if ( ( x  + size   )  < 510   ) { do Screen . setColor ( false    )  ;  do Screen . drawRectangle ( x   , y   , x  + 1   , y  + size    )  ;  let x = x  + 2   ;  do Screen . setColor ( true    )  ;  do Screen . drawRectangle ( ( x  + size   )  - 1   , y   , x  + size   , y  + size    )  ;   } 
  push this 0
  push this 2
  add
  push constant 510
  lt
  not
  if-goto IF_FALSE5
  // do Screen . setColor ( false    )  ; 
  push constant 0
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x   , y   , x  + 1   , y  + size    )  ; 
  push this 0
  push this 1
  push this 0
  push constant 1
  add
  push this 1
  push this 2
  add
  call Screen.drawRectangle 4
  pop temp 0
  // let x = x  + 2   ; 
  push this 0
  push constant 2
  add
  pop this 0
  // do Screen . setColor ( true    )  ; 
  push constant 0
  not
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( ( x  + size   )  - 1   , y   , x  + size   , y  + size    )  ; 
  push this 0
  push this 2
  add
  push constant 1
  sub
  push this 1
  push this 0
  push this 2
  add
  push this 1
  push this 2
  add
  call Screen.drawRectangle 4
  pop temp 0
label IF_FALSE5
  // return ; 
  push constant 0
  return
