function Bat.new 0
  push constant 5
  call Memory.alloc 1
  pop pointer 0
  // let x = Ax   ; 
  push argument 0
  pop this 0
  // let y = Ay   ; 
  push argument 1
  pop this 1
  // let width = Awidth   ; 
  push argument 2
  pop this 2
  // let height = Aheight   ; 
  push argument 3
  pop this 3
  // let direction = 2   ; 
  push constant 2
  pop this 4
  // do show (  )  ; 
  push pointer 0
  call Bat.show 1
  pop temp 0
  // return this   ; 
  push pointer 0
  return
function Bat.dispose 0
  push argument 0
  pop pointer 0
  // do Memory . deAlloc ( this    )  ; 
  push pointer 0
  call Memory.deAlloc 1
  pop temp 0
  // return ; 
  push constant 0
  return
function Bat.show 0
  push argument 0
  pop pointer 0
  // do Screen . setColor ( true    )  ; 
  push constant 0
  not
  call Screen.setColor 1
  pop temp 0
  // do draw (  )  ; 
  push pointer 0
  call Bat.draw 1
  pop temp 0
  // return ; 
  push constant 0
  return
function Bat.hide 0
  push argument 0
  pop pointer 0
  // do Screen . setColor ( false    )  ; 
  push constant 0
  call Screen.setColor 1
  pop temp 0
  // do draw (  )  ; 
  push pointer 0
  call Bat.draw 1
  pop temp 0
  // return ; 
  push constant 0
  return
function Bat.draw 0
  push argument 0
  pop pointer 0
  // do Screen . drawRectangle ( x   , y   , x  + width   , y  + height    )  ; 
  push this 0
  push this 1
  push this 0
  push this 2
  add
  push this 1
  push this 3
  add
  call Screen.drawRectangle 4
  pop temp 0
  // return ; 
  push constant 0
  return
function Bat.setDirection 0
  push argument 0
  pop pointer 0
  // let direction = Adirection   ; 
  push argument 1
  pop this 4
  // return ; 
  push constant 0
  return
function Bat.getLeft 0
  push argument 0
  pop pointer 0
  // return x   ; 
  push this 0
  return
function Bat.getRight 0
  push argument 0
  pop pointer 0
  // return x  + width   ; 
  push this 0
  push this 2
  add
  return
function Bat.setWidth 0
  push argument 0
  pop pointer 0
  // do hide (  )  ; 
  push pointer 0
  call Bat.hide 1
  pop temp 0
  // let width = Awidth   ; 
  push argument 1
  pop this 2
  // do show (  )  ; 
  push pointer 0
  call Bat.show 1
  pop temp 0
  // return ; 
  push constant 0
  return
function Bat.move 0
  push argument 0
  pop pointer 0
  // if ( direction  = 1   ) { let x = x  - 4   ;  if ( x  < 0   ) { let x = 0   ;   }  do Screen . setColor ( false    )  ;  do Screen . drawRectangle ( ( x  + width   )  + 1   , y   , ( x  + width   )  + 4   , y  + height    )  ;  do Screen . setColor ( true    )  ;  do Screen . drawRectangle ( x   , y   , x  + 3   , y  + height    )  ;   } else { let x = x  + 4   ;  if ( ( x  + width   )  > 511   ) { let x = 511  - width   ;   }  do Screen . setColor ( false    )  ;  do Screen . drawRectangle ( x  - 4   , y   , x  - 1   , y  + height    )  ;  do Screen . setColor ( true    )  ;  do Screen . drawRectangle ( ( x  + width   )  - 3   , y   , x  + width   , y  + height    )  ;   } 
  push this 4
  push constant 1
  eq
  not
  if-goto IF_FALSE0
  // let x = x  - 4   ; 
  push this 0
  push constant 4
  sub
  pop this 0
  // if ( x  < 0   ) { let x = 0   ;   } 
  push this 0
  push constant 0
  lt
  not
  if-goto IF_FALSE1
  // let x = 0   ; 
  push constant 0
  pop this 0
label IF_FALSE1
  // do Screen . setColor ( false    )  ; 
  push constant 0
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( ( x  + width   )  + 1   , y   , ( x  + width   )  + 4   , y  + height    )  ; 
  push this 0
  push this 2
  add
  push constant 1
  add
  push this 1
  push this 0
  push this 2
  add
  push constant 4
  add
  push this 1
  push this 3
  add
  call Screen.drawRectangle 4
  pop temp 0
  // do Screen . setColor ( true    )  ; 
  push constant 0
  not
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x   , y   , x  + 3   , y  + height    )  ; 
  push this 0
  push this 1
  push this 0
  push constant 3
  add
  push this 1
  push this 3
  add
  call Screen.drawRectangle 4
  pop temp 0
  goto IF_END0
label IF_FALSE0
  // let x = x  + 4   ; 
  push this 0
  push constant 4
  add
  pop this 0
  // if ( ( x  + width   )  > 511   ) { let x = 511  - width   ;   } 
  push this 0
  push this 2
  add
  push constant 511
  gt
  not
  if-goto IF_FALSE2
  // let x = 511  - width   ; 
  push constant 511
  push this 2
  sub
  pop this 0
label IF_FALSE2
  // do Screen . setColor ( false    )  ; 
  push constant 0
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( x  - 4   , y   , x  - 1   , y  + height    )  ; 
  push this 0
  push constant 4
  sub
  push this 1
  push this 0
  push constant 1
  sub
  push this 1
  push this 3
  add
  call Screen.drawRectangle 4
  pop temp 0
  // do Screen . setColor ( true    )  ; 
  push constant 0
  not
  call Screen.setColor 1
  pop temp 0
  // do Screen . drawRectangle ( ( x  + width   )  - 3   , y   , x  + width   , y  + height    )  ; 
  push this 0
  push this 2
  add
  push constant 3
  sub
  push this 1
  push this 0
  push this 2
  add
  push this 1
  push this 3
  add
  call Screen.drawRectangle 4
  pop temp 0
label IF_END0
  // return ; 
  push constant 0
  return
