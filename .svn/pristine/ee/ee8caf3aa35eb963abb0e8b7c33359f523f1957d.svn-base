// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
	static Array screen,bits;
	static boolean color, wht,blk;
	static int white, black;

	/** Initializes the Screen. */
    function void init() {
	var int i;
	var int j;
	let i = 0;
	let j = 1;
        let screen = 16384;
        let wht = false;
        let blk = true;
        let white = 0;
        let black = 1;
	let bits = Array.new(16);
        let color = blk;
	while(i<15){
		let bits[i] = j;
		let j = j*2;
		let i = i + 1;
	}
	let bits[15] = bits[14]+bits[14];
        return;
    }

	/** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while( i < 8192 ) {
            let screen[i] = wht;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int add;
        var int i;

        let add = (y*32) + (x/16);
        let i = bits[x&15];

        if( color ) {
            let screen[add] = screen[add] | i;
        }
        else {
            let screen[add] = screen[add] & ~i;
        }

        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy,i;
        
        // Make sure x1 <= x2
        if( x1 > x2 ) {
            let i = x1;
            let x1 = x2;
            let x2 = i;
            let i = y1;
            let y1 = y2;
            let y2 = i;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        
        if( dx = 0 ) {
            do Screen.drawVerticalLine( x1, y1, y2 );
        }
        else { if( dy = 0 ) {
            do Screen.drawHorizontalLine( x1, x2, y1 );
        }
        else {
            do Screen.drawDiagonalLine( x1, y1, x2, y2, dx, dy );
        }}
        
        return;
    }
    
    function void drawDiagonalLine( int x1, int y1, int x2, int y2, int dx, int dy ) {
        var int i, j,idiffj,dir;

        let i = 0;
        let j = 0;
        let idiffj = 0;
        
        if( dy < 0 ) {
            let dir = -1;
        }
        else {
            let dir = 1;
        }

        while( ~(i > dx) & (((dir = 1) & ~(j > dy)) | ((dir = -1) & ~(j < dy))) ) {
            do Screen.drawPixel(x1+i,y1+j);
            if( idiffj < 0 ) {
                let i = i + 1;
                let idiffj = idiffj + (dy*dir);
            }
            else {
                let j = j + dir;
                let idiffj = idiffj - dx;
            }
        }
        return;
    }

    function void drawVerticalLine( int x, int y1, int y2 ) {
        var int i;
        
        // Make sure y1 <= y2
        if( y1 > y2 ) {
            let i = y1;
            let y1 = y2;
            let y2 = i;
        }
        
        while( ~(y1 > y2) ) {
            do Screen.drawPixel( x, y1 );
            let y1 = y1 + 1;
        }
        return;
    }
    
    function void drawHorizontalLine( int x1, int x2, int y ) {
        var int strtAdd, endAdd, x1mod16, x2mod16;
        
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let strtAdd = (y*32) + (x1/16);
        let endAdd = (y*32) + (x2/16) + (x2mod16=0);

        if( strtAdd = endAdd ) {   // line starts and ends within the same screen address
            do Screen.draw_short_horizontal_line( x1, x2, y );
        }
        else { 
            if( ~(x1mod16 = 0) ) {      // Draw the short start of the line
                let strtAdd = strtAdd + 1;
                do Screen.draw_short_horizontal_line( x1, x1+16-x1mod16, y );
            }
            if( ~(x2mod16 = 0) ) {      // Draw the short end of the line
                let endAdd = endAdd - 1;
                do Screen.draw_short_horizontal_line( x2-x2mod16, x2, y );
            }
            while( ~(strtAdd > endAdd) ) {     // Draw the middle of the line
                let screen[strtAdd] = color;
                let strtAdd = strtAdd + 1;
            }
        }
        
        return;
    }
    
    function void draw_short_horizontal_line( int x1, int x2, int y ) {
        while( ~(x1 > x2) ) {
            do Screen.drawPixel( x1, y );
            let x1 = x1 + 1;
        }
    
        return;
    }
    
    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        
        let i = y1;
        while( ~(i > y2) ) {
            do Screen.drawHorizontalLine(x1, x2, i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int dx, dy;
        var int rSqr;
        
        let dy = -r;
        let rSqr = r*r;
        while( ~(dy > r) ) {
            let dx = Math.sqrt(rSqr-(dy*dy));
            do Screen.drawHorizontalLine( cx-dx, cx+dx, cy+dy );
            let dy = dy + 1;
        }
        return;
    }
}
