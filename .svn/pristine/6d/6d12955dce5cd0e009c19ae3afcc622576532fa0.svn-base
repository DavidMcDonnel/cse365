// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	field Array temp;
	field int temp_length;
	field int string_length;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
	if(maxLength = 0){
		let maxLength = 1;
	}
	let temp = Array.new(maxLength);
	let temp_length = maxLength;
	let string_length = 0;
	return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
	do Array.dispose(temp);
	return;
    }

    /** Returns the current length of this String. */
    method int length() {
	return string_length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
	return temp[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
	let temp[j] = c;
	return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
	if(string_length < temp_length){
		let temp[string_length] = c;
		let string_length = string_length + 1;
	}
	return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
	if(string_length > 0){
		let string_length = string_length - 1;
	}
	return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
	var int value;
	var int i;
	var boolean bool;
	let value = 0;
	
	if((string_length > 0)&(temp[0] = 45)){
		let bool = true;
		let i = 1;
	}
	else{
		let bool = false;
		let i = 0;
	}
	while ((i<string_length)&(~(temp[i]<48)&~(temp[i]>57))){
		let value = (value*10) + (temp[i] - 48);
		let i = i + 1;
	}
	if(bool){
		return -value;
	}
	else{
		return value;
	}
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {

	let string_length = 0;

	if(number < 0){
		let number = -number;
		do appendChar(45);
	}
	do setIntHelper(number);
	return;	
    }

    /** Helper method for setInt, covers the recursive call. */
    method void setIntHelper(int number){
	var int i;
	var int j;
	var char c;
	
	let i = number/10;
	let j = number - (i*10);
	let c = String.intToChar(j);
	
	if(number < 10){
		do appendChar(c);
	}
	else{
		do setIntHelper(i);
		do appendChar(c);
	}
	return;
    }

    /** Returns the int input transformed to a char. */
    function char intToChar(int i){
	return i + 48;
    }

    /** Returns the new line character. */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;
    }
}
