/*This is a faster 16 bit carry look ahead adder
  that expands upon the general logic of the 4 bit version.
  the last output bit out[16] is the carry out.
*/
CHIP carryLookAheadAdder16{
	IN a[16],b[16],cIn;
	OUT out[16];

	PARTS:
  //call propogate and carry for each bit
  pAndG(a=a[0],b=b[0],prop=p0,gen=g0);
  pAndG(a=a[1],b=b[1],prop=p1,gen=g1);
  pAndG(a=a[2],b=b[2],prop=p2,gen=g2);
  pAndG(a=a[3],b=b[3],prop=p3,gen=g3);
  pAndG(a=a[4],b=b[4],prop=p4,gen=g4);
  pAndG(a=a[5],b=b[5],prop=p5,gen=g5);
  pAndG(a=a[6],b=b[6],prop=p6,gen=g6);
  pAndG(a=a[7],b=b[7],prop=p7,gen=g7);
  pAndG(a=a[8],b=b[8],prop=p8,gen=g8);
  pAndG(a=a[9],b=b[9],prop=p9,gen=g9);
  pAndG(a=a[10],b=b[10],prop=p10,gen=g10);
  pAndG(a=a[11],b=b[11],prop=p11,gen=g11);
  pAndG(a=a[12],b=b[12],prop=p12,gen=g12);
  pAndG(a=a[13],b=b[13],prop=p13,gen=g13);
  pAndG(a=a[14],b=b[14],prop=p14,gen=g14);
  pAndG(a=a[15],b=b[15],prop=p15,gen=g15);

  //do XOR(a[i],b[i],out[i]) before XOR(out[i],c[i-1])
  XOR(a=a[0],b=b[0],out=preBit0);
  XOR(a=a[1],b=b[1],out=preBit1);
  XOR(a=a[2],b=b[2],out=preBit2);
  XOR(a=a[3],b=b[3],out=preBit3);
  XOR(a=a[4],b=b[4],out=preBit4);
  XOR(a=a[5],b=b[5],out=preBit5);
  XOR(a=a[6],b=b[6],out=preBit6);
  XOR(a=a[7],b=b[7],out=preBit7);
  XOR(a=a[8],b=b[8],out=preBit8);
  XOR(a=a[9],b=b[9],out=preBit9);
  XOR(a=a[10],b=b[10],out=preBit10);
  XOR(a=a[11],b=b[11],out=preBit11);
  XOR(a=a[12],b=b[12],out=preBit12);
  XOR(a=a[13],b=b[13],out=preBit13);
  XOR(a=a[14],b=b[14],out=preBit14);
  XOR(a=a[15],b=b[15],out=preBit15);

  //generate last term of c[i]
  AND(a=cIn,b=p0,out=pCIN);
  AND(a=pCIN,b=p1,out=p1p0CIN);
  AND(a=p1p0CIN,b=p2,out=p2p1p0CIN);
  AND(a=p2p1p0CIN,b=p3,out=p3p2p1p0CIN);
  AND(a=p3p2p1p0CIN,b=p4,out=p4p3p2p1p0CIN);
  AND(a=p4p3p2p1p0CIN,b=p5,out=p5p4p3p2p1p0CIN);
  AND(a=p5p4p3p2p1p0CIN,b=p6,out=p6p5p4p3p2p1p0CIN);
  AND(a=p6p5p4p3p2p1p0CIN,b=p7,out=p7p6p5p4p3p2p1p0CIN);
  AND(a=p7p6p5p4p3p2p1p0CIN,b=p8,out=p8p7p6p5p4p3p2p1p0CIN);
  AND(a=p8p7p6p5p4p3p2p1p0CIN,b=p9,out=p9p8p7p6p5p4p3p2p1p0CIN);
  AND(a=p9p8p7p6p5p4p3p2p1p0CIN,b=p10,out=p10p9p8p7p6p5p4p3p2p1p0CIN);
  AND(a=p10p9p8p7p6p5p4p3p2p1p0CIN,b=p11,out=p11p10p9p8p7p6p5p4p3p2p1p0CIN);
  AND(a=p11p10p9p8p7p6p5p4p3p2p1p0CIN,b=p12,out=p12p11p10p9p8p7p6p5p4p3p2p1p0CIN);
  AND(a=p12p11p10p9p8p7p6p5p4p3p2p1p0CIN,b=p13,out=p13p12p11p10p9p8p7p6p5p4p3p2p1p0CIN);
  AND(a=p13p12p11p10p9p8p7p6p5p4p3p2p1p0CIN,b=p14,out=p14p13p12p11p10p9p8p7p6p5p4p3p2p1p0CIN);
  AND(a=p14p13p12p11p10p9p8p7p6p5p4p3p2p1p0CIN,b=p15,out=p15p14p13p12p11p10p9p8p7p6p5p4p3p2p1p0CIN);



  //generate second to last term of c[i]
  AND(a=p1,b=g0,out=p1G0);
  AND(a=p2,b=p1G0,out=p2p1G0);
  AND(a=p3,b=p2p1G0,out=p3p2p1G0);
  AND(a=p4,b=p3p2p1G0,out=p4p3p2p1G0);
  AND(a=p5,b=p4p3p2p1G0,out=p5p4p3p2p1G0);
  AND(a=p6,b=p5p4p3p2p1G0,out=p6p5p4p3p2p1G0);
  AND(a=p7,b=p6p5p4p3p2p1G0,out=p7p6p5p4p3p2p1G0);
  AND(a=p8,b=p7p6p5p4p3p2p1G0,out=p8p7p6p5p4p3p2p1G0);
  AND(a=p9,b=p8p7p6p5p4p3p2p1G0,out=p9p8p7p6p5p4p3p2p1G0);
  AND(a=p10,b=p9p8p7p6p5p4p3p2p1G0,out=p10p9p8p7p6p5p4p3p2p1G0);
  AND(a=p11,b=p10p9p8p7p6p5p4p3p2p1G0,out=p11p10p9p8p7p6p5p4p3p2p1G0);
  AND(a=p12,b=p11p10p9p8p7p6p5p4p3p2p1G0,out=p12p11p10p9p8p7p6p5p4p3p2p1G0);
  AND(a=p13,b=p12p11p10p9p8p7p6p5p4p3p2p1G0,out=p13p12p11p10p9p8p7p6p5p4p3p2p1G0);
  AND(a=p14,b=p13p12p11p10p9p8p7p6p5p4p3p2p1G0,out=p14p13p12p11p10p9p8p7p6p5p4p3p2p1G0);
  AND(a=p15,b=p14p13p12p11p10p9p8p7p6p5p4p3p2p1G0,out=p15p14p13p12p11p10p9p8p7p6p5p4p3p2p1G0);


  //generate third to last term of c[i]
  AND(a=g1,b=p2,out=p2g1);
  AND(a=p2g1,b=p3,out=p3p2g1);
  AND(a=p3p2g1,b=p4,out=p4p3p2g1);
  AND(a=p4p3p2g1,b=p5,out=p5p4p3p2g1);
  AND(a=p5p4p3p2g1,b=p6,out=p6p5p4p3p2g1);
  AND(a=p6p5p4p3p2g1,b=p7,out=p7p6p5p4p3p2g1);
  AND(a=p7p6p5p4p3p2g1,b=p8,out=p8p7p6p5p4p3p2g1);
  AND(a=p8p7p6p5p4p3p2g1,b=p9,out=p9p8p7p6p5p4p3p2g1);
  AND(a=p9p8p7p6p5p4p3p2g1,b=p10,out=p10p9p8p7p6p5p4p3p2g1);
  AND(a=p10p9p8p7p6p5p4p3p2g1,b=p11,out=p11p10p9p8p7p6p5p4p3p2g1);
  AND(a=p11p10p9p8p7p6p5p4p3p2g1,b=p12,out=p12p11p10p9p8p7p6p5p4p3p2g1);
  AND(a=p12p11p10p9p8p7p6p5p4p3p2g1,b=p13,out=p13p12p11p10p9p8p7p6p5p4p3p2g1);
  AND(a=p13p12p11p10p9p8p7p6p5p4p3p2g1,b=p14,out=p14p13p12p11p10p9p8p7p6p5p4p3p2g1);
  AND(a=p14p13p12p11p10p9p8p7p6p5p4p3p2g1,b=p15,out=p15p14p13p12p11p10p9p8p7p6p5p4p3p2g1);

  //generate fourth to last term of c[i]
  AND(a=p3,b=g2,out=p3g2);
  AND(a=p4,b=p3g2,out=p4p3g2);
  AND(a=p5,b=p4p3g2,out=p5p4p3g2);
  AND(a=p6,b=p5p4p3g2,out=p6p5p4p3g2);
  AND(a=p7,b=p6p5p4p3g2,out=p7p6p5p4p3g2);
  AND(a=p8,b=p7p6p5p4p3g2,out=p8p7p6p5p4p3g2);
  AND(a=p9,b=p8p7p6p5p4p3g2,out=p9p8p7p6p5p4p3g2);
  AND(a=p10,b=p9p8p7p6p5p4p3g2,out=p10p9p8p7p6p5p4p3g2);
  AND(a=p11,b=p10p9p8p7p6p5p4p3g2,out=p11p10p9p8p7p6p5p4p3g2);
  AND(a=p12,b=p11p10p9p8p7p6p5p4p3g2,out=p12p11p10p9p8p7p6p5p4p3g2);
  AND(a=p13,b=p12p11p10p9p8p7p6p5p4p3g2,out=p13p12p11p10p9p8p7p6p5p4p3g2);
  AND(a=p14,b=p13p12p11p10p9p8p7p6p5p4p3g2,out=p14p13p12p11p10p9p8p7p6p5p4p3g2);
  AND(a=p15,b=p14p13p12p11p10p9p8p7p6p5p4p3g2,out=p15p14p13p12p11p10p9p8p7p6p5p4p3g2);

  //generate fifth to last term of c[i]
  AND(a=p4,b=g3,out=p4g3);
  AND(a=p5,b=p4g3,out=p5p4g3);
  AND(a=p6,b=p5p4g3,out=p6p5p4g3);
  AND(a=p7,b=p6p5p4g3,out=p7p6p5p4g3);
  AND(a=p8,b=p7p6p5p4g3,out=p8p7p6p5p4g3);
  AND(a=p9,b=p8p7p6p5p4g3,out=p9p8p7p6p5p4g3);
  AND(a=p10,b=p9p8p7p6p5p4g3,out=p10p9p8p7p6p5p4g3);
  AND(a=p11,b=p10p9p8p7p6p5p4g3,out=p11p10p9p8p7p6p5p4g3);
  AND(a=p12,b=p11p10p9p8p7p6p5p4g3,out=p12p11p10p9p8p7p6p5p4g3);
  AND(a=p13,b=p12p11p10p9p8p7p6p5p4g3,out=p13p12p11p10p9p8p7p6p5p4g3);
  AND(a=p14,b=p13p12p11p10p9p8p7p6p5p4g3,out=p14p13p12p11p10p9p8p7p6p5p4g3);
  AND(a=p15,b=p14p13p12p11p10p9p8p7p6p5p4g3,out=p15p14p13p12p11p10p9p8p7p6p5p4g3);

  //generate sixth to last term of c[i]
  AND(a=p5,b=g4,out=p5g4);
  AND(a=p6,b=p5g4,out=p6p5g4);
  AND(a=p7,b=p6p5g4,out=p7p6p5g4);
  AND(a=p8,b=p7p6p5g4,out=p8p7p6p5g4);
  AND(a=p9,b=p8p7p6p5g4,out=p9p8p7p6p5g4);
  AND(a=p10,b=p9p8p7p6p5g4,out=p10p9p8p7p6p5g4);
  AND(a=p11,b=p10p9p8p7p6p5g4,out=p11p10p9p8p7p6p5g4);
  AND(a=p12,b=p11p10p9p8p7p6p5g4,out=p12p11p10p9p8p7p6p5g4);
  AND(a=p13,b=p12p11p10p9p8p7p6p5g4,out=p13p12p11p10p9p8p7p6p5g4);
  AND(a=p14,b=p13p12p11p10p9p8p7p6p5g4,out=p14p13p12p11p10p9p8p7p6p5g4);
  AND(a=p15,b=p14p13p12p11p10p9p8p7p6p5g4,out=p15p14p13p12p11p10p9p8p7p6p5g4);

  //generate seventh to last term of c[i]
  AND(a=p6,b=g5,out=p6g5);
  AND(a=p7,b=p6g5,out=p7p6g5);
  AND(a=p8,b=p7p6g5,out=p8p7p6g5);
  AND(a=p9,b=p8p7p6g5,out=p9p8p7p6g5);
  AND(a=p10,b=p9p8p7p6g5,out=p10p9p8p7p6g5);
  AND(a=p11,b=p10p9p8p7p6g5,out=p11p10p9p8p7p6g5);
  AND(a=p12,b=p11p10p9p8p7p6g5,out=p12p11p10p9p8p7p6g5);
  AND(a=p13,b=p12p11p10p9p8p7p6g5,out=p13p12p11p10p9p8p7p6g5);
  AND(a=p14,b=p13p12p11p10p9p8p7p6g5,out=p14p13p12p11p10p9p8p7p6g5);
  AND(a=p15,b=p14p13p12p11p10p9p8p7p6g5,out=p15p14p13p12p11p10p9p8p7p6g5);

  //generate eighth to last term of c[i]
  AND(a=p7,b=g6,out=p7g6);
  AND(a=p8,b=p7g6,out=p8p7g6);
  AND(a=p9,b=p8p7g6,out=p9p8p7g6);
  AND(a=p10,b=p9p8p7g6,out=p10p9p8p7g6);
  AND(a=p11,b=p10p9p8p7g6,out=p11p10p9p8p7g6);
  AND(a=p12,b=p11p10p9p8p7g6,out=p12p11p10p9p8p7g6);
  AND(a=p13,b=p12p11p10p9p8p7g6,out=p13p12p11p10p9p8p7g6);
  AND(a=p14,b=p13p12p11p10p9p8p7g6,out=p14p13p12p11p10p9p8p7g6);
  AND(a=p15,b=p14p13p12p11p10p9p8p7g6,out=p15p14p13p12p11p10p9p8p7g6);

  //generate ninth to last term of c[i]
  AND(a=p8,b=g7,out=p8g7);
  AND(a=p9,b=p8g7,out=p9p8g7);
  AND(a=p10,b=p9p8g7,out=p10p9p8g7);
  AND(a=p11,b=p10p9p8g7,out=p11p10p9p8g7);
  AND(a=p12,b=p11p10p9p8g7,out=p12p11p10p9p8g7);
  AND(a=p13,b=p12p11p10p9p8g7,out=p13p12p11p10p9p8g7);
  AND(a=p14,b=p13p12p11p10p9p8g7,out=p14p13p12p11p10p9p8g7);
  AND(a=p15,b=p14p13p12p11p10p9p8g7,out=p15p14p13p12p11p10p9p8g7);

  //generate tenth to last term of c[i]
  AND(a=p9,b=g8,out=p9g8);
  AND(a=p10,b=p9g8,out=p10p9g8);
  AND(a=p11,b=p10p9g8,out=p11p10p9g8);
  AND(a=p12,b=p11p10p9g8,out=p12p11p10p9g8);
  AND(a=p13,b=p12p11p10p9g8,out=p13p12p11p10p9g8);
  AND(a=p14,b=p13p12p11p10p9g8,out=p14p13p12p11p10p9g8);
  AND(a=p15,b=p14p13p12p11p10p9g8,out=p15p14p13p12p11p10p9g8);

  //generate eleventh to last term of c[i]
  AND(a=p10,b=g9,out=p10g9);
  AND(a=p11,b=p10g9,out=p11p10g9);
  AND(a=p12,b=p11p10g9,out=p12p11p10g9);
  AND(a=p13,b=p12p11p10g9,out=p13p12p11p10g9);
  AND(a=p14,b=p13p12p11p10g9,out=p14p13p12p11p10g9);
  AND(a=p15,b=p14p13p12p11p10g9,out=p15p14p13p12p11p10g9);

  //generate twelfth to last term of c[i]
  AND(a=p11,b=g10,out=p11g10);
  AND(a=p11,b=p11g10,out=p12p11g10);
  AND(a=p11,b=p12p11g10,out=p13p12p11g10);
  AND(a=p11,b=p13p12p11g10,out=p14p13p12p11g10);
  AND(a=p11,b=p14p13p12p11g10,out=p15p14p13p12p11g10);

  //generate thirteenth to last term of c[i]
  AND(a=p12,b=g11,out=p12g11);
  AND(a=p12,b=p12g11,out=p13p12g11);
  AND(a=p12,b=p13p12g11,out=p14p13p12g11);
  AND(a=p12,b=p14p13p12g11,out=p15p14p13p12g11);

  //generate fourteenth to last term of c[i]
  AND(a=p13,b=g12,out=p13g12);
  AND(a=p13,b=p13g12,out=p14p13g12);
  AND(a=p13,b=p14p13g12,out=p15p14p13g12);

  //generate fifteenth to last term of c[i]
  AND(a=p14,b=g13,out=p14g13);
  AND(a=p14,b=p14g13,out=p15p14g13);

  //generate sixteenth to last term of c[i]
  AND(a=p15,b=g14,out=p15g14);

  //or terms of c0
  OR(a=g0,b=p0CIN,out=c0);

  //or terms of c1
  OR(a=p1g0,b=p1p0CIN,out=c1_pre0);
  OR(a=g1,b=c0_pre0,out=c1);

  //or terms of c2
  OR(a=p2p1g0,b=p2p1p0CIN,out=c2_pre0);
  OR(a=p2g1,b=c2_pre0,out=c2_pre1);
  OR(a=g2,b=c2_pre1,out=c2);

  //or terms of c3
  OR(a=p3p2p1g0,b=p3p2p1p0CIN,out=c3_pre0);
  OR(a=p3p2g1,b=c3_pre0,out=c3_pre1);
  OR(a=p3g2,b=c3_pre1,out=c3_pre2);
  OR(a=g3,b=c3_pre2,out=c3);

  //or terms of c4
  OR(a=p4p3p2p1g0,b=p4p3p2p1p0CIN,out=c4_pre0);
  OR(a=p4p3p2g1,b=c4_pre0,out=c4_pre1);
  OR(a=p4p3g2,b=c4_pre1,out=c4_pre2);
  OR(a=p4g3,b=c4_pre2,out=c4_pre3);
  OR(a=g4,b=c4_pre3,out=c4);

  //or terms of c5
  OR(a=p5p4p3p2p1g0,b=p5p4p3p2p1p0CIN,out=c5_pre0);
  OR(a=p5p4p3p2g1,b=c5_pre0,out=c5_pre1);
  OR(a=p5p4p3g2,b=c5_pre1,out=c5_pre2);
  OR(a=p5p4g3,b=c5_pre2,out=c5_pre3);
  OR(a=p5g4,b=c5_pre3,out=c5_pre4);
  OR(a=g5,b=c5_pre4,out=c5);

  //or terms of c6
  OR(a=p6p5p4p3p2p1g0,b=p6p5p4p3p2p1p0CIN,out=c6_pre0);
  OR(a=p6p5p4p3p2g1,b=c6_pre0,out=c6_pre1);
  OR(a=p6p5p4p3g2,b=c6_pre1,out=c6_pre2);
  OR(a=p6p5p4g3,b=c6_pre2,out=c6_pre3);
  OR(a=p6p5g4,b=c6_pre3,out=c6_pre4);
  OR(a=p6g5,b=c6_pre4,out=c6_pre5);
  OR(a=g6,b=c6_pre5,out=c6);

  //or terms of c7
  OR(a=p7p6p5p4p3p2p1g0,b=p7p6p5p4p3p2p1p0CIN,out=c7_pre0);
  OR(a=p7p6p5p4p3p2g1,b=c7_pre0,out=c7_pre1);
  OR(a=p7p6p5p4p3g2,b=c7_pre1,out=c7_pre2);
  OR(a=p7p6p5p4g3,b=c7_pre2,out=c7_pre3);
  OR(a=p7p6p5g4,b=c7_pre3,out=c7_pre4);
  OR(a=p7p6g5,b=c7_pre4,out=c7_pre5);
  OR(a=p7g6,b=c7_pre5,out=c7_pre6);
  OR(a=g7,b=c7_pre6,out=c7);

  //or terms of c8
  OR(a=p8p7p6p5p4p3p2p1g0,b=p8p7p6p5p4p3p2p1p0CIN,out=c8_pre0);
  OR(a=p8p7p6p5p4p3p2g1,b=c8_pre0,out=c8_pre1);
  OR(a=p8p7p6p5p4p3g2,b=c8_pre1,out=c8_pre2);
  OR(a=p8p7p6p5p4g3,b=c8_pre2,out=c8_pre3);
  OR(a=p8p7p6p5g4,b=c8_pre3,out=c8_pre4);
  OR(a=p8p7p6g5,b=c8_pre4,out=c8_pre5);
  OR(a=p8p7g6,b=c8_pre5,out=c8_pre6);
  OR(a=p8g7,b=c8_pre6,out=c8_pre7);
  OR(a=g8,b=c8_pre7,out=c8);

  //or terms of c9
  OR(a=p9p8p7p6p5p4p3p2p1g0,b=p9p8p7p6p5p4p3p2p1p0CIN,out=c9_pre0);
  OR(a=p9p8p7p6p5p4p3p2g1,b=c9_pre0,out=c9_pre1);
  OR(a=p9p8p7p6p5p4p3g2,b=c9_pre1,out=c9_pre2);
  OR(a=p9p8p7p6p5p4g3,b=c9_pre2,out=c9_pre3);
  OR(a=p9p8p7p6p5g4,b=c9_pre3,out=c9_pre4);
  OR(a=p9p8p7p6g5,b=c9_pre4,out=c9_pre5);
  OR(a=p9p8p7g6,b=c9_pre5,out=c9_pre6);
  OR(a=p9p8g7,b=c9_pre6,out=c9_pre7);
  OR(a=p9g8,b=c9_pre7,out=c9_pre8);
  OR(a=g9,b=c9_pre8,out=c9);

  //or terms of c10
  OR(a=p10p9p8p7p6p5p4p3p2p1g0,b=p10p9p8p7p6p5p4p3p2p1p0CIN,out=c10_pre0);
  OR(a=p10p9p8p7p6p5p4p3p2g1,b=c10_pre0,out=c10_pre1);
  OR(a=p10p9p8p7p6p5p4p3g2,b=c10_pre1,out=c10_pre2);
  OR(a=p10p9p8p7p6p5p4g3,b=c10_pre2,out=c10_pre3);
  OR(a=p10p9p8p7p6p5g4,b=c10_pre3,out=c10_pre4);
  OR(a=p10p9p8p7p6g5,b=c10_pre4,out=c10_pre5);
  OR(a=p10p9p8p7g6,b=c10_pre5,out=c10_pre6);
  OR(a=p10p9p8g7,b=c10_pre6,out=c10_pre7);
  OR(a=p10p9g8,b=c10_pre7,out=c10_pre8);
  OR(a=p10g9,b=c10_pre8,out=c10_pre9);
  OR(a=g10,b=c10_pre9,out=c10);

  //or terms of c11
  OR(a=p11p10p9p8p7p6p5p4p3p2p1g0,b=p11p10p9p8p7p6p5p4p3p2p1p0CIN,out=c11_pre0);
  OR(a=p11p10p9p8p7p6p5p4p3p2g1,b=c11_pre0,out=c11_pre1);
  OR(a=p11p10p9p8p7p6p5p4p3g2,b=c11_pre1,out=c11_pre2);
  OR(a=p11p10p9p8p7p6p5p4g3,b=c11_pre2,out=c11_pre3);
  OR(a=p11p10p9p8p7p6p5g4,b=c11_pre3,out=c11_pre4);
  OR(a=p11p10p9p8p7p6g5,b=c11_pre4,out=c11_pre5);
  OR(a=p11p10p9p8p7g6,b=c11_pre5,out=c11_pre6);
  OR(a=p11p10p9p8g7,b=c11_pre6,out=c11_pre7);
  OR(a=p11p10p9g8,b=c11_pre7,out=c11_pre8);
  OR(a=p11p10g9,b=c11_pre8,out=c11_pre9);
  OR(a=p11g10,b=c11_pre9,out=c11_pre10);
  OR(a=g11,b=c11_pre10,out=c11);

  //or terms of c12
  OR(a=p12p11p10p9p8p7p6p5p4p3p2p1g0,b=p12p11p10p9p8p7p6p5p4p3p2p1p0CIN,out=c12_pre0);
  OR(a=p12p11p10p9p8p7p6p5p4p3p2g1,b=c12_pre0,out=c12_pre1);
  OR(a=p12p11p10p9p8p7p6p5p4p3g2,b=c12_pre1,out=c12_pre2);
  OR(a=p12p11p10p9p8p7p6p5p4g3,b=c12_pre2,out=c12_pre3);
  OR(a=p12p11p10p9p8p7p6p5g4,b=c12_pre3,out=c12_pre4);
  OR(a=p12p11p10p9p8p7p6g5,b=c12_pre4,out=c12_pre5);
  OR(a=p12p11p10p9p8p7g6,b=c12_pre5,out=c12_pre6);
  OR(a=p12p11p10p9p8g7,b=c12_pre6,out=c12_pre7);
  OR(a=p12p11p10p9g8,b=c12_pre7,out=c12_pre8);
  OR(a=p12p11p10g9,b=c12_pre8,out=c12_pre9);
  OR(a=p12p11g10,b=c12_pre9,out=c12_pre10);
  OR(a=p12g11,b=c12_pre10,out=c12_pre11);
  OR(a=g12,b=c12_pre11,out=c12);

  //or terms of c13
  OR(a=p13p12p11p10p9p8p7p6p5p4p3p2p1g0,b=p13p12p11p10p9p8p7p6p5p4p3p2p1p0CIN,out=c13_pre0);
  OR(a=p13p12p11p10p9p8p7p6p5p4p3p2g1,b=c13_pre0,out=c13_pre1);
  OR(a=p13p12p11p10p9p8p7p6p5p4p3g2,b=c13_pre1,out=c13_pre2);
  OR(a=p13p12p11p10p9p8p7p6p5p4g3,b=c13_pre2,out=c13_pre3);
  OR(a=p13p12p11p10p9p8p7p6p5g4,b=c13_pre3,out=c13_pre4);
  OR(a=p13p12p11p10p9p8p7p6g5,b=c13_pre4,out=c13_pre5);
  OR(a=p13p12p11p10p9p8p7g6,b=c13_pre5,out=c13_pre6);
  OR(a=p13p12p11p10p9p8g7,b=c13_pre6,out=c13_pre7);
  OR(a=p13p12p11p10p9g8,b=c13_pre7,out=c13_pre8);
  OR(a=p13p12p11p10g9,b=c13_pre8,out=c13_pre9);
  OR(a=p13p12p11g10,b=c13_pre9,out=c13_pre10);
  OR(a=p13p12g11,b=c13_pre10,out=c13_pre11);
  OR(a=p13g12,b=c13_pre11,out=c13_pre12);
  OR(a=g13,b=c13_pre12,out=c13);

  //or terms of c14
  OR(a=p14p13p12p11p10p9p8p7p6p5p4p3p2p1g0,b=p14p13p12p11p10p9p8p7p6p5p4p3p2p1p0CIN,out=c14_pre0);
  OR(a=p14p13p12p11p10p9p8p7p6p5p4p3p2g1,b=c14_pre0,out=c14_pre1);
  OR(a=p14p13p12p11p10p9p8p7p6p5p4p3g2,b=c14_pre1,out=c14_pre2);
  OR(a=p14p13p12p11p10p9p8p7p6p5p4g3,b=c14_pre2,out=c14_pre3);
  OR(a=p14p13p12p11p10p9p8p7p6p5g4,b=c14_pre3,out=c14_pre4);
  OR(a=p14p13p12p11p10p9p8p7p6g5,b=c14_pre4,out=c14_pre5);
  OR(a=p14p13p12p11p10p9p8p7g6,b=c14_pre5,out=c14_pre6);
  OR(a=p14p13p12p11p10p9p8g7,b=c14_pre6,out=c14_pre7);
  OR(a=p14p13p12p11p10p9g8,b=c14_pre7,out=c14_pre8);
  OR(a=p14p13p12p11p10g9,b=c14_pre8,out=c14_pre9);
  OR(a=p14p13p12p11g10,b=c14_pre9,out=c14_pre10);
  OR(a=p14p13p12g11,b=c14_pre10,out=c14_pre11);
  OR(a=p14p13g12,b=c14_pre11,out=c14_pre12);
  OR(a=p14g13,b=c14_pre12,out=c14_pre13);
  OR(a=g14,b=c14_pre13,out=c14);

  //or terms of c15
  OR(a=p15p14p13p12p11p10p9p8p7p6p5p4p3p2p1g0,b=p15p14p13p12p11p10p9p8p7p6p5p4p3p2p1p0CIN,out=c15_pre0);
  OR(a=p15p14p13p12p11p10p9p8p7p6p5p4p3p2g1,b=c15_pre0,out=c15_pre1);
  OR(a=p15p14p13p12p11p10p9p8p7p6p5p4p3g2,b=c15_pre1,out=c15_pre2);
  OR(a=p15p14p13p12p11p10p9p8p7p6p5p4g3,b=c15_pre2,out=c15_pre3);
  OR(a=p15p14p13p12p11p10p9p8p7p6p5g4,b=c15_pre3,out=c15_pre4);
  OR(a=p15p14p13p12p11p10p9p8p7p6g5,b=c15_pre4,out=c15_pre5);
  OR(a=p15p14p13p12p11p10p9p8p7g6,b=c15_pre5,out=c15_pre6);
  OR(a=p15p14p13p12p11p10p9p8g7,b=c15_pre6,out=c15_pre7);
  OR(a=p15p14p13p12p11p10p9g8,b=c15_pre7,out=c15_pre8);
  OR(a=p15p14p13p12p11p10g9,b=c15_pre8,out=c15_pre9);
  OR(a=p15p14p13p12p11g10,b=c15_pre9,out=c15_pre10);
  OR(a=p15p14p13p12g11,b=c15_pre10,out=c15_pre11);
  OR(a=p15p14p13g12,b=c15_pre11,out=c15_pre12);
  OR(a=p15p14g13,b=c15_pre12,out=c15_pre13);
  OR(a=p15g14,b=c15_pre13,out=c15_pre14);
  OR(a=g15,b=c15_pre14,out=c15);

  //or terms of c16
  OR(a=p16p15p14p13p12p11p10p9p8p7p6p5p4p3p2p1g0,b=p16p15p14p13p12p11p10p9p8p7p6p5p4p3p2p1p0CIN,out=c16_pre0);
  OR(a=p16p15p14p13p12p11p10p9p8p7p6p5p4p3p2g1,b=c16_pre0,out=c16_pre1);
  OR(a=p16p15p14p13p12p11p10p9p8p7p6p5p4p3g2,b=c16_pre1,out=c16_pre2);
  OR(a=p16p15p14p13p12p11p10p9p8p7p6p5p4g3,b=c16_pre2,out=c16_pre3);
  OR(a=p16p15p14p13p12p11p10p9p8p7p6p5g4,b=c16_pre3,out=c16_pre4);
  OR(a=p16p15p14p13p12p11p10p9p8p7p6g5,b=c16_pre4,out=c16_pre5);
  OR(a=p16p15p14p13p12p11p10p9p8p7g6,b=c16_pre5,out=c16_pre6);
  OR(a=p16p15p14p13p12p11p10p9p8g7,b=c16_pre6,out=c16_pre7);
  OR(a=p16p15p14p13p12p11p10p9g8,b=c16_pre7,out=c16_pre8);
  OR(a=p16p15p14p13p12p11p10g9,b=c16_pre8,out=c16_pre9);
  OR(a=p16p15p14p13p12p11g10,b=c16_pre9,out=c16_pre10);
  OR(a=p16p15p14p13p12g11,b=c16_pre10,out=c16_pre11);
  OR(a=p16p15p14p13g12,b=c16_pre11,out=c16_pre12);
  OR(a=p16p15p14g13,b=c16_pre12,out=c16_pre13);
  OR(a=p16p15g14,b=c16_pre13,out=c16_pre14);
  OR(a=p16g15,b=c16_pre14,out=c16_pre15);
  OR(a=g16,b=c16_pre15,out=c16);

  //generate final sums with XOR(XOR(a[i],b[i]),c[i])
  XOR(a=a[preBit0],b=cIn,out=out[0]);
  XOR(a=a[preBit1],b=c0,out=out[1]);
  XOR(a=a[preBit2],b=c1,out=out[2]);
  XOR(a=a[preBit3],b=c2,out=out[3]);
  XOR(a=a[preBit4],b=c3,out=out[4]);
  XOR(a=a[preBit5],b=c5,out=out[5]);
  XOR(a=a[preBit6],b=c6,out=out[6]);
  XOR(a=a[preBit7],b=c7,out=out[7]);
  XOR(a=a[preBit8],b=c8,out=out[8]);
  XOR(a=a[preBit9],b=c9,out=out[9]);
  XOR(a=a[preBit10],b=c10,out=out[10]);
  XOR(a=a[preBit11],b=c11,out=out[11]);
  XOR(a=a[preBit12],b=c12,out=out[12]);
  XOR(a=a[preBit13],b=c13,out=out[13]);
  XOR(a=a[preBit14],b=c14,out=out[14]);
  XOR(a=a[preBit15],b=c15,out=out[15]);


}
