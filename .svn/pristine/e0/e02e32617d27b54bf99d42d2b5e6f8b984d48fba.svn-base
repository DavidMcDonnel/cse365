<class>
 <keyword> class </keyword>
 <identifier> Main </identifier>
 <symbol> { </symbol>
 <subroutineDec>
  <keyword> function </keyword>
  <keyword> void </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <varDec>
   <keyword> var </keyword>
   <type>
    <identifier> SquareGame </identifier>
   </type>
   <identifier> game </identifier>
   <symbol> ; </symbol>
  </varDec>
  <statements>
   <letStatement>
    <keyword> let </keyword>
    <identifier> game </identifier>
    <symbol> = </symbol>
    <expression>
     <term>
      <subroutineCall>
       <identifier> SquareGame </identifier>
       <symbol> . </symbol>
       <identifier> new </identifier>
       <symbol> ( </symbol>
       <expressionList>
       </expressionList>
       <symbol> ) </symbol>
      </subroutineCall>
     </term>
    </expression>
    <symbol> ; </symbol>
   </letStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> game </identifier>
     <symbol> . </symbol>
     <identifier> run </identifier>
     <symbol> ( </symbol>
     <expressionList>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <doStatement>
    <keyword> do </keyword>
    <subroutineCall>
     <identifier> game </identifier>
     <symbol> . </symbol>
     <identifier> dispose </identifier>
     <symbol> ( </symbol>
     <expressionList>
     </expressionList>
     <symbol> ) </symbol>
    </subroutineCall>
    <symbol> ; </symbol>
   </doStatement>
   <returnStatement>
    <keyword> return </keyword>
    <symbol> ; </symbol>
   </returnStatement>
  </statements>
  <symbol> } </symbol>
 </subroutineDec>
 <symbol> } </symbol>
</class>